unit UTypeDataFieldORM; // Class para tratar tipos de dados //

interface

Uses
  StrUtils, System.SysUtils, System.Classes, System.UITypes;

Type
  TSQLSyntaxResult = Class
  Private
    Result: Boolean;
    ResultSQL: String;
    ResultWrongSQL: String;

  End;

Type

  TIntegerFieldORM = Class // Integer
  private
    FAssigned: Boolean;
    vDataValue: Integer;
    Procedure SETvDataValue(const Value: Integer);
    Function GETvDataValue: Integer;
  Public
    constructor Create; reintroduce;
    Property Assigned: Boolean read FAssigned;
    Property Value: Integer read GETvDataValue write SETvDataValue;
    function ToSQL: TSQLSyntaxResult;
  end;

Type
  TStringFieldORM = Class // String
  Private
    vString: String;
    FAssigned: Boolean;
    FLength: Integer;
    Procedure SETvString(const Value: String);
    Function GETvString: String;
    function getLength: Integer;
    procedure setLength(const Value: Integer);
  Public
    constructor Create; reintroduce;
    Property Assigned: Boolean read FAssigned;
    Property Value: String read GETvString write SETvString;
    property Length: Integer read getLength write setLength;

  end;

Type

  TDateFieldORM = class // Date
  private
    vDate: TDate;
    FAssigned: Boolean;
    Procedure SETvDate(const Value: TDate);
    Function GETvData: TDate;
  Public
    constructor Create; reintroduce;
    Property Assigned: Boolean read FAssigned;
    Property Value: TDate read GETvData write SETvDate;
    function ToSQL: String;
  end;

Type
  TDateTimeFieldORM = class // DateTime
  private
    vDateTime: TDateTime;
    FAssigned: Boolean;
    procedure SETvDateTime(const Value: TDateTime);
    Function GETvDateTime: TDateTime;
  public
    Property Assigned: Boolean read FAssigned;
    Property Value: TDateTime read GETvDateTime write SETvDateTime;
    Function ToSQL: String;
  End;

Type
  TBooleanFieldORM = Class // Boolean
  private
    vBoolean: Boolean;
    FAssigned: Boolean;
    procedure SETvBoolean(const Value: Boolean);
    Function GETvBoolean: Boolean;
  public
    property Value: Boolean read GETvBoolean write SETvBoolean;
    Function ToSQL: String;
  end;

Type
  TFloatFieldORM = Class // Float
  private
    vFloat: Currency;
    FAssigned: Boolean;
    Procedure SETvFloat(const Value: Currency);
    Function GETvFloat: Currency;
  Public
    Property Assigned: Boolean read FAssigned;
    Property Value: Currency read GETvFloat write SETvFloat;
    Function ToSQL: String;
  End;

implementation

{ TInteger }

constructor TIntegerFieldORM.Create;
begin
  inherited;
  vDataValue := 0;
  FAssigned := false;
end;

function TIntegerFieldORM.GETvDataValue: Integer;
begin
  Result := vDataValue;
end;

procedure TIntegerFieldORM.SETvDataValue(const Value: Integer);
begin

  vDataValue := Value;
  FAssigned := True;
end;

function TIntegerFieldORM.ToSQL: TSQLSyntaxResult;
begin
  Result := TSQLSyntaxResult.Create;
  if Assigned then
  begin
    Result.Result := True;
    Result.ResultSQL := IntToStr(Value);
  end
  else
  begin
    Result.Result := false;
    Result.ResultWrongSQL := 'Field empty.';
  end;
  Free;
end;

{ TString }

constructor TStringFieldORM.Create;
begin
  inherited;
  vString := '';
  Assigned := false;
end;

function TStringFieldORM.getLength: Integer;
begin
  Result := FLength;
end;

function TStringFieldORM.GETvString: String;
begin
  Result := vString;
end;

procedure TStringFieldORM.setLength(const Value: Integer);
begin
  FLength := Value;
end;

procedure TStringFieldORM.SETvString(const Value: String);
begin
  vString := Value;
  FAssigned := True;
end;

{ TDateTime }
constructor TDateFieldORM.Create;
begin
  vDate := '00-00-0000';
  Assigned := false;
end;

function TDateFieldORM.GETvData: TDate;
begin
  Result := vDate;
end;

procedure TDateFieldORM.SETvDate(const Value: TDate);
begin
  vDate := Value;
  FAssigned := True;
end;

function TDateFieldORM.ToSQL: String;
begin
  Result := QuotedStr(FormatDateTime('YYYY-MM-DD', Value));
end;

{ TBoolean }

function TBooleanFieldORM.GETvBoolean: Boolean;
begin
  Result := vBoolean;
end;

procedure TBooleanFieldORM.SETvBoolean(const Value: Boolean);
begin
  vBoolean := Value;
  FAssigned := True;
end;

function TBooleanFieldORM.ToSQL: String;
begin
  if Value = True then
  begin
    Result := '1';
  end
  Else
  begin
    Result := '0';
  end;

end;

function TDateTimeFieldORM.GETvDateTime: TDateTime;
begin
  Result := vDateTime;
end;

procedure TDateTimeFieldORM.SETvDateTime(const Value: TDateTime);
begin
  vDateTime := Value;
  FAssigned := True;
end;

function TDateTimeFieldORM.ToSQL: String;
begin
  Result := QuotedStr(FormatDateTime('YYYY-MM-DD HH:NN:SS', Value));
end;

{ TFloatFieldORM }

function TFloatFieldORM.GETvFloat: Currency;
begin
  Result := vFloat;
end;

procedure TFloatFieldORM.SETvFloat(const Value: Currency);
begin
  vFloat := Value;
  FAssigned := True;
end;

function TFloatFieldORM.ToSQL: String;
var
  FomartSQL: TFormatSettings;
begin
  FomartSQL.DecimalSeparator := '.';
  FomartSQL.ThousandSeparator := ',';
  Result := CurrToStr(Value, FomartSQL);
end;

end.
